fullTranslation(imports,defs,translation_unit) ::=<<
<imports; separator="\n">


<defs; separator="\n\n">


<translation_unit>
>>

bracketed_expression(expression) ::=<<
(<expression>)
>>

square_bracketed_expression(expression) ::=<<
[<expression>]
>>

unary_operator_expression(operator,expression) ::=<<
<operator> <expression>
>>

binary_operator_expression(expression0,operator,expression1) ::=<<
<expression0> <operator> <expression1>
>>

assignment_expression(postfix_expression,expression) ::=<<
<postfix_expression> = <expression>
>>

function_def(name,args,return_list,statement_list) ::=<<
def <name>(<args>):
	<statement_list>
	return <return_list>
>>

pureif(condition, statement_list) ::=<<
if <condition>:
    <statement_list>
>>

ifelse(condition, statement_list0,statement_list1) ::=<<
if <condition>:
    <statement_list0>
else:
    <statement_list1>
>>

while_loop(condition, statement_list) ::=<<
while <condition>:
    <statement_list>
>>

foreach(variable,iterable,statement_list) ::=<<
for <variable> in <iterable>:
    <statement_list>
>>

lambda(args,expression) ::=<<
lambda <args>: <expression>
>>

range(start,stop) ::=<<
range(<start>,<stop>)
>>

function_call(name,arg_list) ::=<<
<name>(<arg_list>)
>>

statement_list(statement_list,statement) ::=<<
<statement_list>
<statement>
>>

comma_separated(list,element) ::=<<
<list>, <element>
>>

comment(text) ::=<<
# <text>
>>

pass() ::=<<
pass
>>

return() ::=<<
return
>>

break() ::=<<
break
>>

literal(text) ::=<<
<text>
>>

empty() ::=<<>>